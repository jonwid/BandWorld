#pragma warning disable 1591
// ------------------------------------------------------------------------------
//  <autogenerated>
//      This code was generated by a tool.
//      Mono Runtime Version: 4.0.30319.42000
// 
//      Changes to this file may cause incorrect behavior and will be lost if 
//      the code is regenerated.
//  </autogenerated>
// ------------------------------------------------------------------------------

namespace BandWorld.MVC
{
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

#line 1 "Test.cshtml"
using JTRazorPortable;

#line default
#line hidden

#line 2 "Test.cshtml"
using BandWorld.MVC.Models;

#line default
#line hidden

#line 3 "Test.cshtml"
using BandWorld.MVC.Helpers;

#line default
#line hidden


[System.CodeDom.Compiler.GeneratedCodeAttribute("RazorTemplatePreprocessor", "2.6.0.0")]
public partial class Test : ViewBase
{

#line hidden

#line 6 "Test.cshtml"
public MainViewModel Model { get; set; }

#line default
#line hidden


public override void Execute()
{

#line 8 "Test.cshtml"
  
    // Specify our layout, which defaults to "_Layout" unless we set an empty string here.
    Layout = "~/Views/Shared/_Layout.cshtml";

    // Demonstrate the connection to our post handler.
    using (Html.BeginForm("TestPost", "Test"))
    {
        // Demonstrates using a style from our site.css file.


#line default
#line hidden
WriteLiteral("        <p");

WriteLiteral(" class=\"red\"");

WriteLiteral(">\n            Hello, world.\n        </p>\n");


#line 19 "Test.cshtml"

        // Demonstrates referencing our model.


#line default
#line hidden
WriteLiteral("        <p>\n            This is my text: ");


#line 22 "Test.cshtml"
                        Write(Model.Text);


#line default
#line hidden
WriteLiteral("\n        </p>\n");


#line 24 "Test.cshtml"

        // Demonstrates referencing a content file.


#line default
#line hidden
WriteLiteral("        <p>\n            This is my Images image: <img");

WriteAttribute ("src", " src=\"", "\""

#line 27 "Test.cshtml"
        , Tuple.Create<string,object,bool> ("", Url.Content("/Content/Images/Back.png")

#line default
#line hidden
, false)
);
WriteLiteral(" />\n        </p>\n");


#line 29 "Test.cshtml"

        // Demonstrates using a sub-view
        Html.RenderPartial("_SubView");

        // Demonstrates using a different model with a sub-view.
        MainViewModel subModel = new MainViewModel();
        subModel.Text = Model.Text + " (this is added)";
        // Demonstrate alternate sub-view rendering.
        

#line default
#line hidden

#line 37 "Test.cshtml"
   Write(Html.Partial("_SubView", subModel));


#line default
#line hidden

#line 37 "Test.cshtml"
                                           ;

        // Demonstrates using a control whose value gets posted.


#line default
#line hidden
WriteLiteral("        <p>\n            Enter something: <input");

WriteLiteral(" type=\"text\"");

WriteLiteral(" name=\"textControl\"");

WriteLiteral(" id=\"textControl\"");

WriteLiteral(" class=\"text_edit\"");

WriteLiteral(" />\n        </p>\n");


#line 43 "Test.cshtml"



#line default
#line hidden
WriteLiteral("        <p>\n            Ajax result:\n            <div");

WriteLiteral(" id=\"ajaxDiv\"");

WriteLiteral(">\n            </div>\n        </p>\n");


#line 49 "Test.cshtml"
        // Demonstrates a submit button and a couple of buttons calling Javascript functions.


#line default
#line hidden
WriteLiteral("        <p>\n            <input");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" name=\"command\"");

WriteLiteral(" value=\"Save\"");

WriteLiteral(" />\n            <input");

WriteLiteral(" type=\"button\"");

WriteLiteral(" name=\"command\"");

WriteLiteral(" value=\"myFunc\"");

WriteLiteral(" onclick=\"myFunc(\'from myFunc\')\"");

WriteLiteral(" />\n            <input");

WriteLiteral(" type=\"button\"");

WriteLiteral(" name=\"command\"");

WriteLiteral(" value=\"ajaxHtml\"");

WriteLiteral(" onclick=\"ajaxHtml(\'from ajaxHtml\')\"");

WriteLiteral(" />\n            <input");

WriteLiteral(" type=\"button\"");

WriteLiteral(" name=\"command\"");

WriteLiteral(" value=\"ajaxJson\"");

WriteLiteral(" onclick=\"ajaxJson(\'from ajaxJson\')\"");

WriteLiteral(" />\n            <input");

WriteLiteral(" type=\"button\"");

WriteLiteral(" name=\"command\"");

WriteLiteral(" value=\"alert\"");

WriteLiteral(" onclick=\"alert(\'Alert called.\')\"");

WriteLiteral(" />\n            <input");

WriteLiteral(" type=\"submit\"");

WriteLiteral(" name=\"command\"");

WriteLiteral(" value=\"CallJavascript\"");

WriteLiteral(" />\n            <input");

WriteLiteral(" type=\"button\"");

WriteLiteral(" name=\"command\"");

WriteLiteral(" value=\"CallNative\"");

WriteLiteral(" onclick=\"callNative(\'arg1\', \'arg2\')\"");

WriteLiteral("  />\n        </p>\n");

WriteLiteral("        <p>\n");

WriteLiteral("            ");


#line 60 "Test.cshtml"
       Write(Html.ActionLink("Error", "Error", "Test", new { message = "This is my error." }));


#line default
#line hidden
WriteLiteral("\n");

WriteLiteral("            ");


#line 61 "Test.cshtml"
       Write(Html.ActionLink("Forward", "Forward", "Test"));


#line default
#line hidden
WriteLiteral("\n        </p>\n");


#line 63 "Test.cshtml"
    }


#line default
#line hidden
WriteLiteral("\n<!-- Demonstrates using a section.\n    We can put our scripts here if we need th" +
"em to be where the layout puts them via the\n    RenderSection directive. -->\n");

DefineSection("Scripts", () => {

WriteLiteral("\n    <script");

WriteLiteral(" type=\"text/javascript\"");

WriteLiteral(" charset=\"utf-8\"");

WriteLiteral(@">
        function myFunc(str) {
            // Demonstrate using jquery.
            $(""#textControl"").val(str);
            //alert(""myFunc called."");
        }

        function ajaxHtml(str) {
            // Demonstrate using jquery.
            //$(""#textControl"").val(ret);
            //alert(""myFunc called."");
            PortableAjax({
                url: """);


#line 81 "Test.cshtml"
                 Write(Url.Action("TestAjax", "Test"));


#line default
#line hidden
WriteLiteral(@""",
                data: {
                    stringValue: str
                },
                type: ""POST"",
                complete: ReceiveData
            });
        }

        function ReceiveData(data) {
            var div = document.getElementById(""ajaxDiv"");
            div.innerHTML = data.responseText;
        }

        function ajaxJson(str) {
            PortableAjax({
                url: """);


#line 97 "Test.cshtml"
                 Write(Url.Action("TestAjaxJson", "Test"));


#line default
#line hidden
WriteLiteral(@""",
                data: {
                    stringValue: str
                },
                type: ""POST"",
                complete: ReceiveDataJson
            });
        }

        function ReceiveDataJson(data) {
            var div = document.getElementById(""ajaxDiv"");
            div.innerText = data.responseJSON;
        }

        function callNative(arg1, arg2) {
            PortableNativeCall(""MyNativeCall"", [""arg1"", arg1, ""arg2"", arg2], ""callNativeReturn"");
        }

        function callNativeReturn(returnValue) {
            var div = document.getElementById(""ajaxDiv"");
            div.innerHTML = returnValue;
        }

        // This is called when the document is ready.
        $(document).ready(function () {
            myScript('textControl', 'Started');
        });
    </script>
");

});

}
}
}
#pragma warning restore 1591
